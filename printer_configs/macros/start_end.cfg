[gcode_macro _START_END_PARAMS]
variable_bed_warp_wait_multiplier: 8.0
variable_bed_warp_fraction_wait: 0.75
variable_bed_warp_wait_interval: 15
variable_enable_disable_filament_sensor: True
variable_max_z_position: 250.0
gcode:

[gcode_macro _CLIENT_VARIABLE]
variable_park_at_cancel   : True  
variable_custom_park_dz   : 3.0   
variable_use_custom_pos   : True 
variable_custom_park_x    : 210
variable_custom_park_y    : 175  
variable_retract          : 1.0   
variable_cancel_retract   : 5.0   
variable_speed_retract    : 35.0  
variable_unretract        : 1.0   
variable_speed_unretract  : 35.0  
variable_speed_hop        : 15.0  
variable_speed_move       : 300.0 
gcode:

[virtual_pins]

[output_pin bed_warp_stabilisation]
pin: virtual_pin:bed_wrap_stabilise_pin
value: 0

[idle_timeout]
timeout: 3600
gcode:
    {% if printer.pause_resume.is_paused %}
        RESPOND TYPE=command MSG='Printer is paused, timeout bypassed'
    {% else %}
        RESPOND TYPE=command MSG='Timeout Reached - Turning off heaters and motors'
        TURN_OFF_HEATERS
        M84
    {% endif %}

[delayed_gcode WAIT_TEMP]
# initial_duration: 2.
gcode:
  {% set cur_temp = printer.extruder.temperature %}
  {% if cur_temp|int < 70 %}
    WAIT_TEMP_END
  {% else %}
    UPDATE_DELAYED_GCODE ID=WAIT_TEMP DURATION=5
  {% endif %}

[gcode_macro WAIT_TEMP_START]
gcode:
  {action_respond_info("Wait temp start\n")}
  UPDATE_DELAYED_GCODE ID=WAIT_TEMP DURATION=1
  M106 P0 S178.5
  M106 P2 S127.5

[gcode_macro WAIT_TEMP_END]
gcode:
  {action_respond_info("Wait temp end\n")}
  UPDATE_DELAYED_GCODE ID=WAIT_TEMP DURATION=0
  TURN_OFF_FANS

[gcode_macro END_PRINT_Z_POINT]
gcode:
  {% if "xyz" in printer.toolhead.homed_axes %}
    {% set max_z = printer["gcode_macro _START_END_PARAMS"].max_z_position|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set z_safe = 0.0 %}
    {% if act_z < (max_z / 2) %}
      {% set z_safe = (max_z / 2) - act_z %}
    {% elif act_z < max_z %}
      {% set z_safe = 2.0 %}
    {% endif %}
    {% if z_safe > 2.0 %}
      G91
      {% set z_safe = z_safe - 2.0 %}
      G1 Z{z_safe} F600
      G90
    {% endif %}
  {% else %}
    {action_respond_info("End print xyz_axes is NULL\n")}
  {% endif %}

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP=params.BED_TEMP|default(65)|float %}
    {% set EXTRUDER_TEMP=params.EXTRUDER_TEMP|default(230)|float %}
    {% set bed_warp_stabilisation = printer['output_pin bed_warp_stabilisation'].value == 1 %}
    {% set current_bed_temp = printer.heater_bed.temperature %}
    {% set enable_disable_filament_sensor = printer["gcode_macro _START_END_PARAMS"].enable_disable_filament_sensor %}
    
    SET_GCODE_OFFSET Z=0
    BED_MESH_CLEAR
    WAIT_TEMP_END
    CLEAR_PAUSE

    {% if enable_disable_filament_sensor %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
    {% endif %}

    M104 S150
    M140 S{BED_TEMP}

    G28
    G4 P500 

    RESPOND TYPE=command MSG='Waiting for bed temp to reach {BED_TEMP}c'
    M190 S{BED_TEMP}                                                            

    {% if bed_warp_stabilisation %}
       {% if current_bed_temp < (BED_TEMP * 0.99) %}
            _WARP_STABILISE TARGET_TEMP={BED_TEMP} CURRENT_TEMP={current_bed_temp}
        {% else %}
            RESPOND TYPE=command MSG='Skipping bed warp stabilisation as bed already at {current_bed_temp}c'
        {% endif %}
    {% endif %}

    # G28 Z
    Z_TILT_ADJUST
    G4 P500                                             

    LC_AUTO_Z_OFFSET SET=1 SAMPLES=2 PROBE_SPEED=3
    BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=5
    # BED_MESH_CALIBRATE_RAPID ADAPTIVE=1 ADAPTIVE_MARGIN=5

    # CLEAN_NOZZLE
    SMART_PARK 

    RESPOND TYPE=command MSG='Waiting for nozzle temp to reach {EXTRUDER_TEMP}c'
    M109 S{EXTRUDER_TEMP}                                          
    LINE_PURGE

[gcode_macro END_PRINT]
gcode:
    {% set bed_warp_stabilisation = printer['output_pin bed_warp_stabilisation'].value == 1 %}
    {% set enable_disable_filament_sensor = printer["gcode_macro _START_END_PARAMS"].enable_disable_filament_sensor %}

    _CLIENT_RETRACT
    {% if bed_warp_stabilisation %}
        RESPOND TYPE=command MSG='Heatbed waiting for next print'
        M104 S0
    {% else %}
        TURN_OFF_HEATERS
    {% endif %}

    TURN_OFF_FANS

    {% if enable_disable_filament_sensor %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    {% endif %}

    SET_PAUSE_NEXT_LAYER ENABLE=0
    SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
    
    M220 S100
    _TOOLHEAD_PARK_PAUSE_CANCEL
    END_PRINT_Z_POINT

    WAIT_TEMP_START
    # M84 

[gcode_macro _WARP_STABILISE]
description: "Performs bed warp stabilisation based on the current bed temperature. Adjusts stabilisation time according to the bed temperature."
gcode:
    {% set multiplier = printer["gcode_macro _START_END_PARAMS"].bed_warp_wait_multiplier|float %}
    {% set interval = printer["gcode_macro _START_END_PARAMS"].bed_warp_wait_interval|int %}
    {% set partial = printer["gcode_macro _START_END_PARAMS"].bed_warp_fraction_wait|float %}

    {% set current_temp = params.CURRENT_TEMP|float %}
    {% set target_temp = params.TARGET_TEMP|float %}

    {% if current_temp > (target_temp * partial) %}
        {% set total_time = ((target_temp - current_temp) * multiplier)|int %}
    {% else %}
        {% set total_time = (target_temp * multiplier)|int %}
    {% endif %}

    RESPOND TYPE=command MSG='Bed Warp Stabilisation starting with a total time of {total_time} seconds...'
    
    {% set loops = (total_time / interval)|int %}   
    {% for i in range(loops) %}
      {% set time_remaining = total_time - (i + 1) * interval %}
      RESPOND TYPE=command MSG='Bed Warp Stabilization { time_remaining } seconds remaining'
      {% if time_remaining < interval %}
        G4 P{ time_remaining * 1000 }
      {% else %}
        G4 P{ interval * 1000 }
      {% endif %}
    {% endfor %}

    RESPOND TYPE=command MSG='Warp Stabilisation complete!'
